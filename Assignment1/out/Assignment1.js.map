{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../common/WebGLUtils.ts","webpack:///./src/Assignment1.ts","webpack:///./src/View.ts","webpack:///./node_modules/gl-matrix/esm/common.js","webpack:///./node_modules/gl-matrix/esm/mat2.js","webpack:///./node_modules/gl-matrix/esm/mat2d.js","webpack:///./node_modules/gl-matrix/esm/mat3.js","webpack:///./node_modules/gl-matrix/esm/mat4.js","webpack:///./node_modules/gl-matrix/esm/vec3.js","webpack:///./node_modules/gl-matrix/esm/vec4.js","webpack:///./node_modules/gl-matrix/esm/quat.js","webpack:///./node_modules/gl-matrix/esm/quat2.js","webpack:///./node_modules/gl-matrix/esm/vec2.js","webpack:///./node_modules/gl-matrix/esm/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","createShader","gl","source","shaderType","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","create3DContext","canvas","attribs","names","ii","length","getContext","e","createErrorHTML","msg","context","WebGLRenderingContext","document","getElementsByTagName","innerHTML","GET_A_WEBGL_BROWSER","vShaderSource","fShaderSource","program","createProgram","vShader","VERTEX_SHADER","fShader","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","numFrames","lastTime","console","log","querySelector","WebGLUtils","setupWebGL","antialias","alpha","depth","stencil","alert","view","View","width","Number","getAttribute","height","setDimensions","init","tick","Date","getTime","currentTime","frameRate","getElementById","toFixed","animate","requestAnimationFrame","main","this","dims","vec2","fromValues","pacmanCenter","pacmanRadius","angle","direction","cometCenter","cometLargeRadius","cometSmallRadius","time","cometCount","offset","appeared","shaderProgram","createShaderProgram","vData","iData","push","theta","Math","PI","cos","sin","pacManSlices","pacmanIndices","excludedSlices","useProgram","verticesOffset","ratio","cometIndices","vertexData","Float32Array","v","indexData","Uint8Array","from","vbo","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","ibo","ELEMENT_ARRAY_BUFFER","positionLocation","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","clearColor","proj","mat4","ortho","viewport","color","vec4","modelView","translate","vec3","scale","projectionLocation","getUniformLocation","uniformMatrix4fv","modelViewLocation","colorLocation","uniform4fv","drawElements","TRIANGLES","UNSIGNED_BYTE","rotate","glMatrix","toRadian","TRIANGLE_STRIP","clear","COLOR_BUFFER_BIT","drawPacman","drawComet","animatePacman","animateComet","draw","EPSILON","ARRAY_TYPE","Array","RANDOM","random","setMatrixArrayType","type","degree","a","equals","b","abs","max","out","clone","copy","identity","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rad","v0","v1","fromRotation","fromScaling","str","frob","hypot","LDU","L","D","U","add","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","y","arguments","sqrt","mul","sub","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","fromTranslation","fromMat4","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","x","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","a6","a7","a8","b6","b7","b8","m03","m13","m23","m30","m31","m32","m33","axis","len","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","a9","a14","a15","b9","b13","b14","b15","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","tempA","tempB","cosine","acos","zero","vec","div","dist","sqrDist","sqrLen","forEach","stride","count","fn","arg","u","A","B","C","E","F","G","H","I","J","v2","v3","v4","s1","s2","ix","iy","iz","iw","setAxisAngle","getAxisAngle","out_axis","getAngle","dotproduct","calculateW","exp","et","ln","atan2","pow","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","dot","invDot","conjugate","fromMat3","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","rotationTo","sqlerp","setAxes","dq","w1","fromRotationTranslationValues","outer","getReal","getDual","setReal","setDual","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","a_dot_b","transformMat2","transformMat2d","p0","p1","sinC","cosC","len1","len2"],"mappings":"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","file":"Assignment1.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * Utilities useful to set up WebGL context. This code has been heavily borrowed from the code that accompanies \"WebGL Programming Guide: Interactive 3D Graphics Programming with WebGL\" by Matsuda and Lea\n */\n\n/**\n * This function imports in an image using HTML's Image class, so that it can be loaded and used as an WebGL texture\n * @param gl the rendering context used to create the texture\n * @param textureURL the URL of the image\n * @return the texture ID of the resulting texture that can be used for texture mapping\n */\n\nfunction loadTexture(gl: WebGLRenderingContext, textureURL: string): WebGLTexture {\n  let textureId: WebGLTexture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, textureId);\n\n  // Because images have to be download over the internet\n  // they might take a moment until they are ready.\n  // Until then put a single pixel in the texture so we can\n  // use it immediately. When the image has finished downloading\n  // we'll update the texture with the contents of the image.\n  const level = 0;\n  const internalFormat = gl.RGBA;\n  const width = 1;\n  const height = 1;\n  const border = 0;\n  const srcFormat = gl.RGBA;\n  const srcType = gl.UNSIGNED_BYTE;\n  const pixel = new Uint8Array([0, 0, 255, 255]);  // opaque blue\n  gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\n    width, height, border, srcFormat, srcType,\n    pixel);\n\n  const image = new Image();\n  image.src = textureURL;\n  image.addEventListener(\"load\", () => {\n    gl.bindTexture(gl.TEXTURE_2D, textureId);\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\n      srcFormat, srcType, image);\n    gl.generateMipmap(gl.TEXTURE_2D);\n  });\n\n\n  return textureId;\n}\n\nfunction isPowerOf2(value: number): boolean {\n  return (value & (value - 1)) == 0;\n}\n\n/**\n * Creates a webgl context. If creation fails it will\n * change the contents of the container of the <canvas>\n * tag to an error message with the correct links for WebGL.\n * @param {Element} canvas. The canvas element to create a\n *     context from.\n * @return {WebGLRenderingContext} The created context.\n */\nexport function setupWebGL(canvas: HTMLCanvasElement, attribs: WebGLContextAttributes): WebGLRenderingContext {\n\n  var context: WebGLRenderingContext = create3DContext(canvas, attribs);\n  if (!context || (!(context instanceof WebGLRenderingContext))) {\n    var container = document.getElementsByTagName(\"body\")[0];\n    container.innerHTML = createErrorHTML(GET_A_WEBGL_BROWSER);\n  }\n\n  return context;\n\n}\n\n/**\n   * A helper function to create the shader program, given the shader sources.\n   * @param gl the WebGLRenderingContext that can be used to call WebGL functions\n   * @param vShaderSource the source of the vertex shader, as a string\n   * @param fShaderSource the source of the fragment shader, as a string\n   * @return the shader program object, as a WebGLProgram object\n   */\nexport function createShaderProgram(gl: WebGLRenderingContext, vShaderSource: string, fShaderSource: string): WebGLProgram {\n  //create a new shader program\n  let program: WebGLProgram = gl.createProgram();\n\n  //create a shader object for the vertex shader\n  let vShader: WebGLShader = createShader(gl, vShaderSource, gl.VERTEX_SHADER);\n\n  //create a shader object for the fragment shader\n  let fShader: WebGLShader = createShader(gl, fShaderSource, gl.FRAGMENT_SHADER);\n\n  //attach the vertex shader to the program\n  gl.attachShader(program, vShader);\n  //attach the fragment shader to the program\n  gl.attachShader(program, fShader);\n\n  //now \"link\" the program. This links together the two shaders into one program\n  gl.linkProgram(program);\n  //verify that the shader program was successfully linked\n  let success: number = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (!success) {\n    //something went wrong when linking the program; get the error \n    throw \"Could not link shader: \" + gl.getProgramInfoLog(program);\n  }\n\n  return program;\n}\n\n/**\n * A helper function to create a new shader program, given its source.\n * @param gl the WebGLRenderingContext that can be used to call WebGL functions\n * @param source the source of the shader, as a string\n * @param shaderType the type of the shader (ehter VERTEX_SHADER or FRAGMENT_SHADER)\n * @return the shader object, as a WebGLShader\n */\nexport function createShader(gl: WebGLRenderingContext, source: string, shaderType: number): WebGLShader {\n  let shader: WebGLShader = gl.createShader(shaderType);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  // Check if it compiled\n  let success: number = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (!success) {\n    // Something went wrong during compilation; get the error\n    throw \"could not compile my shader:\" + source + \":\" + gl.getShaderInfoLog(shader);\n  }\n  return shader;\n}\n\n\n/**\n * Creates a webgl context.\n * @param {!Canvas} canvas The canvas tag to get context\n *     from. If one is not passed in one will be created.\n * @return {WebGLRenderingContext} The created context.\n */\nexport function create3DContext(canvas: HTMLCanvasElement, attribs: WebGLContextAttributes): WebGLRenderingContext {\n  var names = [\"webgl\", \"experimental-webgl\"];\n  for (var ii = 0; ii < names.length; ++ii) {\n    try {\n      return <WebGLRenderingContext>canvas.getContext(\"webgl\", attribs);\n    } catch (e) { }\n\n  }\n  return null;\n}\n\n/**\n * Creates the HTML for a failure message\n * @param {string} canvasContainerId id of container of th\n *        canvas.\n * @return {string} The html.\n */\nexport function createErrorHTML(msg: string): string {\n  return '' +\n    '<div style=\"margin: auto; width:500px;z-index:10000;margin-top:20em;text-align:center;\">' + msg + '</div>';\n}\n\n/**\n * Message for getting a webgl browser\n * @type {string}\n */\nlet GET_A_WEBGL_BROWSER: string = '' +\n  'This page requires a browser that supports WebGL.<br/>' +\n  '<a href=\"http://get.webgl.org\">Click here to upgrade your browser.</a>';\n\n/**\n * Mesasge for need better hardware\n * @type {string}\n */\nlet OTHER_PROBLEM: string = '' +\n  \"It doesn't appear your computer can support WebGL.<br/>\" +\n  '<a href=\"http://get.webgl.org\">Click here for more information.</a>';\n\n","import { View } from \"./View\";\nimport * as WebGLUtils from \"%COMMON/WebGLUtils\";\n\n/**\n * These variables keep track of the number of frames since the last count was started, and the\n * time at which the last count was started\n */\nvar numFrames: number = 0;\nvar lastTime: number = -1;\n\nfunction main(): void {\n  console.log(\"Here I am\");\n  //retrieve <canvas> element\n  var canvas: HTMLCanvasElement = <HTMLCanvasElement>(\n    document.querySelector(\"#glCanvas\")\n  );\n  if (!canvas) {\n    console.log(\"Failed to retrieve the <canvas> element\");\n    return;\n  }\n\n  //get the rendering context for webgl\n  let gl: WebGLRenderingContext = WebGLUtils.setupWebGL(canvas, {\n    antialias: false,\n    alpha: false,\n    depth: false,\n    stencil: false\n  });\n\n  // Only continue if WebGL is available and working\n  if (gl == null) {\n    alert(\n      \"Unable to initialize WebGL. Your browser or machine may not support it.\"\n    );\n    return;\n  }\n\n  let view: View = new View(gl);\n\n  let vShaderSource: string;\n  let fShaderSource: string;\n\n  vShaderSource = getVShader();\n\n  fShaderSource = getFShader();\n\n  let width: number = Number(canvas.getAttribute(\"width\"));\n  let height: number = Number(canvas.getAttribute(\"height\"));\n\n  view.setDimensions(width, height);\n\n  view.init(vShaderSource, fShaderSource);\n\n  //set up animation callback function\n\n  var tick = function() {\n    if (lastTime == -1) {\n      lastTime = new Date().getTime();\n    }\n    numFrames = numFrames + 1;\n    if (numFrames >= 100) {\n      let currentTime: number = new Date().getTime();\n      let frameRate: number = (1000 * numFrames) / (currentTime - lastTime);\n      lastTime = currentTime;\n      document.getElementById(\"frameratedisplay\").innerHTML =\n        \"Frame rate: \" + frameRate.toFixed(1);\n      numFrames = 0;\n    }\n\n    view.animate();\n\n    //this line sets up the animation\n    requestAnimationFrame(tick);\n  };\n\n  //call tick the first time\n  tick();\n}\n\nfunction init(gl: WebGLRenderingContext) {}\n\nfunction draw(gl: WebGLRenderingContext) {}\n\nfunction getVShader(): string {\n  return `attribute vec4 vPosition;\n    uniform vec4 vColor;\n    uniform mat4 proj;\n    uniform mat4 modelView;\n    varying vec4 outColor;\n    \n    void main()\n    {\n        gl_Position = proj * modelView * vPosition;\n        outColor = vColor;\n    }\n    `;\n}\n\nfunction getFShader(): string {\n  return `precision mediump float;\n    varying vec4 outColor;\n\n    void main()\n    {\n        gl_FragColor = outColor;\n    }\n    `;\n}\n\nmain();\n","import { vec3, vec4, mat4, glMatrix, vec2 } from \"gl-matrix\";\nimport * as WebGLUtils from \"%COMMON/WebGLUtils\";\n\nexport class View {\n  private gl: WebGLRenderingContext;\n  private shaderProgram: WebGLProgram;\n  private vbo: WebGLBuffer;\n  private ibo: WebGLBuffer;\n  private pacmanIndices: number;\n  private cometIndices: number;\n  private proj: mat4;\n  private modelView: mat4;\n  private pacmanCenter: vec2;\n  private cometCenter: vec2;\n  private pacmanRadius: number;\n  private dims: vec2;\n  private excludedSlices: number;\n  private angle: number;\n  private direction: number;\n  private cometLargeRadius: number;\n  private cometSmallRadius: number;\n  private time: number;\n  private cometCount: number;\n  private offset: number;\n  private appeared: boolean;\n\n  constructor(gl: WebGLRenderingContext) {\n    this.gl = gl;\n    this.dims = vec2.fromValues(0, 0);\n    //pacman related variables\n    this.pacmanCenter = vec2.fromValues(200, 200);\n    this.pacmanRadius = 100;\n    this.angle = 0;\n    this.direction = 1;\n\n    //comet related variables\n    this.cometCenter = vec2.fromValues(500, 200);\n    this.cometLargeRadius = 100;\n    this.cometSmallRadius = 80;\n    this.time = 0;\n    this.cometCount = 0;\n    this.offset = 0;\n    this.appeared = false;\n  }\n\n  public setDimensions(width: number, height: number): void {\n    this.dims = vec2.fromValues(width, height);\n  }\n\n  public init(vShaderSource: string, fShaderSource: string): void {\n    //create and set up the shader\n    this.shaderProgram = WebGLUtils.createShaderProgram(\n      this.gl,\n      vShaderSource,\n      fShaderSource\n    );\n\n    let vData: vec2[] = [];\n    let iData: number[] = [];\n\n    // Sets the vertices and indices for pacman\n    let pacManSlices: number = 45;\n\n    //push the pacmanCenter of the circle as the first vertex\n    vData.push(vec2.fromValues(0, 0));\n    for (let i: number = 0; i < pacManSlices; i++) {\n      let theta: number = (i * 2 * Math.PI) / pacManSlices;\n      vData.push(vec2.fromValues(Math.cos(theta), Math.sin(theta)));\n    }\n\n    vData.push(vec2.fromValues(1, 0));\n\n    //we will use TRIANGLES as our draw mode as this allowed to me to draw the\n    //mouth in a separate drawElements call more easily\n    //therefore we need to put the indices as (0,1,2) (0,2,3) etc\n    for (let i: number = 1; i < pacManSlices + 1; i++) {\n      iData.push(0);\n      iData.push(i);\n      iData.push(i + 1);\n    }\n    this.pacmanIndices = iData.length;\n\n    //these are the indices that are specific to the mouth\n    //40 degres and each triangle has 3 indices\n    this.excludedSlices = (40 / 360) * pacManSlices * 3;\n    //enable the current program\n    this.gl.useProgram(this.shaderProgram);\n    let verticesOffset = vData.length;\n\n    //add the vertices for the comet\n    let cometSlices: number = 60;\n\n    //push the center of the circle as the first vertex\n    const ratio: number = this.cometLargeRadius / this.cometSmallRadius;\n    for (let i: number = 0; i < cometSlices; i++) {\n      let theta: number = (i * 2 * Math.PI) / cometSlices;\n      vData.push(\n        vec2.fromValues(ratio * Math.cos(theta), ratio * Math.sin(theta))\n      );\n      vData.push(vec2.fromValues(Math.cos(theta), Math.sin(theta)));\n    }\n    //this is just to make it a nice circle\n    vData.push(vec2.fromValues(ratio, 0));\n    vData.push(vec2.fromValues(1, 0));\n\n    //we will use TRIANGLE_STRIP to draw the comet\n    //(which is why the vertices were put the way they were above)\n    //the offset is because I decided to use one vertex array to avoid buffering vertices\n    for (let i: number = 0; i < vData.length - verticesOffset; i++) {\n      iData.push(i + verticesOffset);\n    }\n\n    this.cometIndices = iData.length - this.pacmanIndices;\n\n    //buffer indices and vertices\n    let vertexData: Float32Array = new Float32Array(\n      (function*() {\n        for (let v of vData) {\n          yield v[0];\n          yield v[1];\n        }\n      })()\n    );\n\n    let indexData: Uint8Array = Uint8Array.from(iData);\n\n    //create a vertex buffer object\n    this.vbo = this.gl.createBuffer();\n    //bind the buffer to GL_ARRAY_BUFFER\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vbo);\n    //copy over the vertex data\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexData, this.gl.STATIC_DRAW);\n\n    //create a vertex buffer object for indices\n    this.ibo = this.gl.createBuffer();\n    //bind the buffer to GL_INDEX_BUFFER\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.ibo);\n    //copy over the index data\n    this.gl.bufferData(\n      this.gl.ELEMENT_ARRAY_BUFFER,\n      indexData,\n      this.gl.STATIC_DRAW\n    );\n\n    //get the location of the vPosition attribute in the shader program\n    let positionLocation: number = this.gl.getAttribLocation(\n      this.shaderProgram,\n      \"vPosition\"\n    );\n\n    //tell webgl that the position attribute can be found as 2-floats-per-vertex with a gap of 20 bytes\n    //(2 floats per position, 3 floats per color = 5 floats = 20 bytes\n    this.gl.vertexAttribPointer(\n      positionLocation,\n      2,\n      this.gl.FLOAT,\n      false,\n      0,\n      0\n    );\n    //tell webgl to enable this vertex attribute array, so that when it draws it will use this\n    this.gl.enableVertexAttribArray(positionLocation);\n\n    //set the clear color\n    this.gl.clearColor(1, 1, 1, 1);\n\n    this.proj = mat4.ortho(\n      mat4.create(),\n      0,\n      this.dims[0],\n      0,\n      this.dims[1],\n      -1,\n      1\n    );\n    this.gl.viewport(0, 0, this.dims[0], this.dims[1]);\n  }\n\n  public drawPacman() {\n    let color: vec4 = vec4.create();\n    color[0] = 1;\n    color[1] = 1;\n    color[2] = 0;\n\n    //this draws the body sans mouth\n    this.modelView = mat4.create();\n    mat4.translate(\n      this.modelView,\n      this.modelView,\n      vec3.fromValues(this.pacmanCenter[0], this.pacmanCenter[1], 0)\n    );\n    mat4.scale(\n      this.modelView,\n      this.modelView,\n      vec3.fromValues(this.pacmanRadius, this.pacmanRadius, this.pacmanRadius)\n    );\n\n    this.gl.useProgram(this.shaderProgram);\n\n    let projectionLocation: WebGLUniformLocation = this.gl.getUniformLocation(\n      this.shaderProgram,\n      \"proj\"\n    );\n    this.gl.uniformMatrix4fv(projectionLocation, false, this.proj);\n\n    let modelViewLocation: WebGLUniformLocation = this.gl.getUniformLocation(\n      this.shaderProgram,\n      \"modelView\"\n    );\n    this.gl.uniformMatrix4fv(modelViewLocation, false, this.modelView);\n    let colorLocation: WebGLUniformLocation = this.gl.getUniformLocation(\n      this.shaderProgram,\n      \"vColor\"\n    );\n    this.gl.uniform4fv(colorLocation, color);\n\n    this.gl.drawElements(\n      this.gl.TRIANGLES,\n      this.pacmanIndices - this.excludedSlices * 2,\n      this.gl.UNSIGNED_BYTE,\n      this.excludedSlices\n    );\n\n    //this draws and animates the upper mouth\n    this.modelView = mat4.create();\n    mat4.translate(\n      this.modelView,\n      this.modelView,\n      vec3.fromValues(this.pacmanCenter[0], this.pacmanCenter[1], 0)\n    );\n    mat4.scale(\n      this.modelView,\n      this.modelView,\n      vec3.fromValues(this.pacmanRadius, this.pacmanRadius, this.pacmanRadius)\n    );\n    mat4.rotate(\n      this.modelView,\n      this.modelView,\n      glMatrix.toRadian(this.angle),\n      vec3.fromValues(0, 0, 1)\n    );\n\n    this.gl.uniformMatrix4fv(modelViewLocation, false, this.modelView);\n\n    this.gl.drawElements(\n      this.gl.TRIANGLES,\n      this.excludedSlices,\n      this.gl.UNSIGNED_BYTE,\n      0\n    );\n\n    //this draws and animates the lower mouth\n    this.modelView = mat4.create();\n    mat4.translate(\n      this.modelView,\n      this.modelView,\n      vec3.fromValues(this.pacmanCenter[0], this.pacmanCenter[1], 0)\n    );\n    mat4.scale(\n      this.modelView,\n      this.modelView,\n      vec3.fromValues(this.pacmanRadius, this.pacmanRadius, this.pacmanRadius)\n    );\n    //angle is negated so it will mirror the upper mouth\n    mat4.rotate(\n      this.modelView,\n      this.modelView,\n      glMatrix.toRadian(-1 * this.angle),\n      vec3.fromValues(0, 0, 1)\n    );\n\n    this.gl.uniformMatrix4fv(modelViewLocation, false, this.modelView);\n\n    this.gl.drawElements(\n      this.gl.TRIANGLES,\n      this.excludedSlices,\n      this.gl.UNSIGNED_BYTE,\n      this.pacmanIndices - this.excludedSlices\n    );\n  }\n\n  public drawComet() {\n    let color: vec4 = vec4.create();\n    color[0] = 0;\n    color[1] = 0;\n    color[2] = 0;\n\n    this.modelView = mat4.create();\n    mat4.translate(\n      this.modelView,\n      this.modelView,\n      vec3.fromValues(this.cometCenter[0], this.cometCenter[1], 0)\n    );\n    mat4.scale(\n      this.modelView,\n      this.modelView,\n      vec3.fromValues(\n        this.cometSmallRadius,\n        this.cometSmallRadius,\n        this.cometSmallRadius\n      )\n    );\n\n    this.gl.useProgram(this.shaderProgram);\n\n    let projectionLocation: WebGLUniformLocation = this.gl.getUniformLocation(\n      this.shaderProgram,\n      \"proj\"\n    );\n    this.gl.uniformMatrix4fv(projectionLocation, false, this.proj);\n\n    let modelViewLocation: WebGLUniformLocation = this.gl.getUniformLocation(\n      this.shaderProgram,\n      \"modelView\"\n    );\n    this.gl.uniformMatrix4fv(modelViewLocation, false, this.modelView);\n\n    this.gl.uniformMatrix4fv(modelViewLocation, false, this.modelView);\n    let colorLocation: WebGLUniformLocation = this.gl.getUniformLocation(\n      this.shaderProgram,\n      \"vColor\"\n    );\n    this.gl.uniform4fv(colorLocation, color);\n\n    //we use the count and offset to draw the part of the ring thats disappearing/reappearing\n    this.gl.drawElements(\n      this.gl.TRIANGLE_STRIP,\n      this.cometCount,\n      this.gl.UNSIGNED_BYTE,\n      this.pacmanIndices + this.offset\n    );\n  }\n\n  public draw(): void {\n    //clear the window\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n    this.drawPacman();\n    this.drawComet();\n  }\n\n  public animatePacman() {\n    //when the angle reaches 40 degrees it should go down again\n    if (this.angle == 0) {\n      this.direction = 1;\n    } else if (this.angle == 40) {\n      this.direction = -1;\n    }\n    this.angle += this.direction;\n  }\n\n  public animateComet() {\n    //the time was just to slow down the animation (1000 is arbitrary just to keep it small)\n    this.time = (this.time + 1) % 1000;\n    if (this.time % 2 == 0) {\n      //we use 2 because the strip uses 2 indices at a time it will look cleaner\n      if (this.appeared) {\n        this.offset += 2;\n        this.cometCount = this.cometIndices - this.offset;\n        this.appeared = this.offset < this.cometIndices;\n      } else {\n        this.cometCount += 2;\n        this.offset = 0;\n        this.appeared = this.cometCount >= this.cometIndices;\n      }\n    }\n  }\n\n  public animate(): void {\n    this.animatePacman();\n    this.animateComet();\n    this.draw();\n  }\n}\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n *\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, b, c,\r\n *  d, tx, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, b, 0,\r\n *  c, d, 0,\r\n *  tx, ty, 1]\r\n * </pre>\r\n * The last column is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {mat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {mat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {mat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {mat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {quat} a     Origin unit quaternion \r\n * @param  {quat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n * \r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q a normalized quaternion\r\n * @param {vec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {vec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {mat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {quat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {quat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat} q quaternion to rotate by\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {vec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {quat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat2} a the first dual quaternion.\r\n * @param {quat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat2} a the first dual quat.\r\n * @param {quat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };"],"sourceRoot":""}